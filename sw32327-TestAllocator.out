==31== Memcheck, a memory error detector
==31== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==31== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info
==31== Command: ./TestAllocator
==31== 
Running main() from gtest_main.cc
[==========] Running 46 tests from 21 test cases.
[----------] Global test environment set-up.
[----------] 1 test from TestAllocatorStress1/0, where TypeParam = std::allocator<int>
[ RUN      ] TestAllocatorStress1/0.test_0
[       OK ] TestAllocatorStress1/0.test_0 (28 ms)
[----------] 1 test from TestAllocatorStress1/0 (39 ms total)

[----------] 1 test from TestAllocatorStress1/1, where TypeParam = my_allocator<int, 12000ul>
[ RUN      ] TestAllocatorStress1/1.test_0
[       OK ] TestAllocatorStress1/1.test_0 (728 ms)
[----------] 1 test from TestAllocatorStress1/1 (728 ms total)

[----------] 2 tests from construct_test
[ RUN      ] construct_test.construct_1
[       OK ] construct_test.construct_1 (32 ms)
[ RUN      ] construct_test.construct_2
[       OK ] construct_test.construct_2 (3 ms)
[----------] 2 tests from construct_test (36 ms total)

[----------] 2 tests from allocate_test/0, where TypeParam = my_allocator<char, 900ul>
[ RUN      ] allocate_test/0.allocate_1
[       OK ] allocate_test/0.allocate_1 (12 ms)
[ RUN      ] allocate_test/0.allocate_2
[       OK ] allocate_test/0.allocate_2 (2 ms)
[----------] 2 tests from allocate_test/0 (14 ms total)

[----------] 2 tests from allocate_test/1, where TypeParam = my_allocator<int, 1200ul>
[ RUN      ] allocate_test/1.allocate_1
[       OK ] allocate_test/1.allocate_1 (11 ms)
[ RUN      ] allocate_test/1.allocate_2
[       OK ] allocate_test/1.allocate_2 (2 ms)
[----------] 2 tests from allocate_test/1 (13 ms total)

[----------] 2 tests from allocate_test/2, where TypeParam = my_allocator<double, 1600ul>
[ RUN      ] allocate_test/2.allocate_1
[       OK ] allocate_test/2.allocate_1 (11 ms)
[ RUN      ] allocate_test/2.allocate_2
[       OK ] allocate_test/2.allocate_2 (2 ms)
[----------] 2 tests from allocate_test/2 (14 ms total)

[----------] 2 tests from allocate_test
[ RUN      ] allocate_test.allocate_3
[       OK ] allocate_test.allocate_3 (9 ms)
[ RUN      ] allocate_test.allocate_4
[       OK ] allocate_test.allocate_4 (8 ms)
[----------] 2 tests from allocate_test (17 ms total)

[----------] 4 tests from deallocate_test/0, where TypeParam = my_allocator<char, 10000ul>
[ RUN      ] deallocate_test/0.deallocate_1
[       OK ] deallocate_test/0.deallocate_1 (13 ms)
[ RUN      ] deallocate_test/0.deallocate_2
[       OK ] deallocate_test/0.deallocate_2 (3 ms)
[ RUN      ] deallocate_test/0.deallocate_3
[       OK ] deallocate_test/0.deallocate_3 (3 ms)
[ RUN      ] deallocate_test/0.deallocate_4
[       OK ] deallocate_test/0.deallocate_4 (6 ms)
[----------] 4 tests from deallocate_test/0 (25 ms total)

[----------] 4 tests from deallocate_test/1, where TypeParam = my_allocator<int, 10000ul>
[ RUN      ] deallocate_test/1.deallocate_1
[       OK ] deallocate_test/1.deallocate_1 (13 ms)
[ RUN      ] deallocate_test/1.deallocate_2
[       OK ] deallocate_test/1.deallocate_2 (2 ms)
[ RUN      ] deallocate_test/1.deallocate_3
[       OK ] deallocate_test/1.deallocate_3 (4 ms)
[ RUN      ] deallocate_test/1.deallocate_4
[       OK ] deallocate_test/1.deallocate_4 (3 ms)
[----------] 4 tests from deallocate_test/1 (22 ms total)

[----------] 4 tests from deallocate_test/2, where TypeParam = my_allocator<double, 10000ul>
[ RUN      ] deallocate_test/2.deallocate_1
[       OK ] deallocate_test/2.deallocate_1 (12 ms)
[ RUN      ] deallocate_test/2.deallocate_2
[       OK ] deallocate_test/2.deallocate_2 (2 ms)
[ RUN      ] deallocate_test/2.deallocate_3
[       OK ] deallocate_test/2.deallocate_3 (4 ms)
[ RUN      ] deallocate_test/2.deallocate_4
[       OK ] deallocate_test/2.deallocate_4 (2 ms)
[----------] 4 tests from deallocate_test/2 (22 ms total)

[----------] 2 tests from valid_test
[ RUN      ] valid_test.valid_1
[       OK ] valid_test.valid_1 (5 ms)
[ RUN      ] valid_test.valid_2
[       OK ] valid_test.valid_2 (2 ms)
[----------] 2 tests from valid_test (8 ms total)

[----------] 3 tests from next_test
[ RUN      ] next_test.next_1
[       OK ] next_test.next_1 (7 ms)
[ RUN      ] next_test.next_2
[       OK ] next_test.next_2 (2 ms)
[ RUN      ] next_test.next_3
[       OK ] next_test.next_3 (2 ms)
[----------] 3 tests from next_test (13 ms total)

[----------] 2 tests from prev_test
[ RUN      ] prev_test.prev_1
[       OK ] prev_test.prev_1 (2 ms)
[ RUN      ] prev_test.prev_2
[       OK ] prev_test.prev_2 (2 ms)
[----------] 2 tests from prev_test (4 ms total)

[----------] 1 test from set_header_test
[ RUN      ] set_header_test.set_header_1
[       OK ] set_header_test.set_header_1 (4 ms)
[----------] 1 test from set_header_test (4 ms total)

[----------] 2 tests from TestAllocator1/0, where TypeParam = std::allocator<int>
[ RUN      ] TestAllocator1/0.test_1
[       OK ] TestAllocator1/0.test_1 (3 ms)
[ RUN      ] TestAllocator1/0.test_10
[       OK ] TestAllocator1/0.test_10 (5 ms)
[----------] 2 tests from TestAllocator1/0 (8 ms total)

[----------] 2 tests from TestAllocator1/1, where TypeParam = std::allocator<double>
[ RUN      ] TestAllocator1/1.test_1
[       OK ] TestAllocator1/1.test_1 (5 ms)
[ RUN      ] TestAllocator1/1.test_10
[       OK ] TestAllocator1/1.test_10 (5 ms)
[----------] 2 tests from TestAllocator1/1 (10 ms total)

[----------] 2 tests from TestAllocator1/2, where TypeParam = my_allocator<int, 100ul>
[ RUN      ] TestAllocator1/2.test_1
[       OK ] TestAllocator1/2.test_1 (8 ms)
[ RUN      ] TestAllocator1/2.test_10
[       OK ] TestAllocator1/2.test_10 (3 ms)
[----------] 2 tests from TestAllocator1/2 (11 ms total)

[----------] 2 tests from TestAllocator1/3, where TypeParam = my_allocator<double, 100ul>
[ RUN      ] TestAllocator1/3.test_1
[       OK ] TestAllocator1/3.test_1 (9 ms)
[ RUN      ] TestAllocator1/3.test_10
[       OK ] TestAllocator1/3.test_10 (4 ms)
[----------] 2 tests from TestAllocator1/3 (13 ms total)

[----------] 2 tests from TestAllocator2
[ RUN      ] TestAllocator2.const_index
[       OK ] TestAllocator2.const_index (2 ms)
[ RUN      ] TestAllocator2.index
[       OK ] TestAllocator2.index (2 ms)
[----------] 2 tests from TestAllocator2 (4 ms total)

[----------] 2 tests from TestAllocator3/0, where TypeParam = my_allocator<int, 100ul>
[ RUN      ] TestAllocator3/0.test_1
[       OK ] TestAllocator3/0.test_1 (3 ms)
[ RUN      ] TestAllocator3/0.test_10
[       OK ] TestAllocator3/0.test_10 (3 ms)
[----------] 2 tests from TestAllocator3/0 (6 ms total)

[----------] 2 tests from TestAllocator3/1, where TypeParam = my_allocator<double, 100ul>
[ RUN      ] TestAllocator3/1.test_1
[       OK ] TestAllocator3/1.test_1 (3 ms)
[ RUN      ] TestAllocator3/1.test_10
[       OK ] TestAllocator3/1.test_10 (3 ms)
[----------] 2 tests from TestAllocator3/1 (6 ms total)

[----------] Global test environment tear-down
[==========] 46 tests from 21 test cases ran. (1062 ms total)
[  PASSED  ] 46 tests.
==31== 
==31== HEAP SUMMARY:
==31==     in use at exit: 72,704 bytes in 1 blocks
==31==   total heap usage: 2,300 allocs, 2,299 frees, 305,882 bytes allocated
==31== 
==31== LEAK SUMMARY:
==31==    definitely lost: 0 bytes in 0 blocks
==31==    indirectly lost: 0 bytes in 0 blocks
==31==      possibly lost: 0 bytes in 0 blocks
==31==    still reachable: 72,704 bytes in 1 blocks
==31==         suppressed: 0 bytes in 0 blocks
==31== Rerun with --leak-check=full to see details of leaked memory
==31== 
==31== For counts of detected and suppressed errors, rerun with: -v
==31== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
File 'Allocator.h'
Lines executed:98.55% of 69
Branches executed:94.44% of 576
Taken at least once:64.76% of 576
Calls executed:63.27% of 520
Creating 'Allocator.h.gcov'
File 'TestAllocator.c++'
Lines executed:90.95% of 199
Branches executed:66.38% of 1160
Taken at least once:35.17% of 1160
Calls executed:54.87% of 1190
